using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestAppn
{
    public class Node
    {
        public Object data {get;set;}
        public Node Next { get; set; }
    }

    class TestLinkedList
    {
        private Node head = null;

        public void AddNode(object data)
        {
            Node newnode = new Node();
            newnode.data = data;
            newnode.Next = null;

            Node temp = head;
            if (temp == null)
            {
                head = newnode;
            }
            else
            {
                while (temp.Next != null)
                {
                    temp = temp.Next;
                }

                temp.Next = newnode;
            }

        }

        public void AddFirst(object data)
        {
            Node newnode = new Node();
            newnode.data = data;
            newnode.Next = null;

            if (head == null)
            {
                head = newnode;
            }
            else
            {
                newnode.Next = head;
                head = newnode;
            }
        }

        public Node HeadNode
        {
            get
            {
                return head;
            }
        }
        public int GetCount(Node head)
        {
            if (head == null)
                return 0;
            return 1 + GetCount(head.Next);
        }

        public bool SearchKeyIterative(Node head, int x)
        {
            
                Node temp = head;

                while (temp != null)
                {
                    if ((int)temp.data == x)
                    {
                        return true;
                    }
                    temp = temp.Next;
                }
                return false;
        }

        public bool SearchKeyRecusrive(Node head, int x)
        {
            if (head == null)
                return false;
            else if ((int)head.data == x)
                return true;
            else
                return SearchKeyRecusrive(head.Next, x);
        }


        public void SwapNodes(Node head, int x, int y)
        {
            if (x == y || head ==  null)
                return;

            Node tempx = head; // node to point to x 
            Node tempPrevx = null; //prev pointer for x node

            while (tempx != null && (int)tempx.data != x)
            {
                tempPrevx = tempx;
                tempx = tempx.Next;
            }

            Node tempy = head; //// node to point to x 
            Node tempPrevy = null;//prev pointer for y node

            while (tempy != null && (int)tempy.data != y)
            {
                tempPrevy = tempy;
                tempy = tempy.Next;
            }

            if (tempx == null || tempy == null)
                return;

            if (tempPrevx != null) //if the head node is not x, set prev pointer of x to y (move y)
            {
                tempPrevx.Next = tempy;
            }
            else
            {
                head = tempy; //else head node as y
            }

            if (tempPrevy != null) //if the head node is not y, set prev pointer of y to x (move x)
                tempPrevy.Next = tempx;
            else
                head = tempx;//else head node as x

            //set nex pointers, swap
            Node tempyy = tempy.Next;
            tempy.Next = tempx.Next;
            tempx.Next = tempyy;
        }

        public void DeleteNodeByPointer(Node nodetobedeleted)
        {
            if (nodetobedeleted == null)
                return;

            Node temp = nodetobedeleted.Next;
            if (temp != null) //if it is not last node
            {
                nodetobedeleted.data = temp.data;
                nodetobedeleted.Next = temp.Next;
            }
            else
            {
                Node temp1 = head; //Last Node
                while (temp1.Next != nodetobedeleted)
                {
                    temp1 = temp1.Next;
                }

                temp1.Next = null;
            }
            
        }

        public void DeleteNode(Node head, int data)
        {
            if (head == null)
                return;
            if ((int)head.data == data)
                head = head.Next;
            else
            {
                Node temp = head;
                while (temp.Next != null)
                {
                    if ((int)temp.Next.data == data)
                    {
                        temp.Next = temp.Next.Next;
                        return;
                    }
                    temp = temp.Next;
                }
            }
        }

        public int GetMiddleNodeData(Node head)
        {
            if (head == null)
                return -1;
            Node slowptr = head;
            Node fastptr = head;

            while (fastptr != null && fastptr.Next != null)
            {
                slowptr = slowptr.Next;
                fastptr = fastptr.Next.Next;
            }

            return (int)slowptr.data;
        }

        public int GetMiddleNodeData2(Node head)
        {
            if (head == null)
                return -1;
            
            Node midnode = head;
            int count = 0;
            Node temp = head;
            while (temp != null)
            {
                if ((count & 1) != 0)
                {
                    midnode = midnode.Next;
                }
                temp = temp.Next;
                count++;
            }

            if (midnode != null)
                return (int)midnode.data;
            else
                return -1;
        }

        //Time Complexity: O(n) where n is the length of linked list.
        public int GetNthNodeFromLast(Node head, int n)
        {
            if (head == null)
                return -1;


            Node refNodePtr = head;
            Node nthNodePtr = head;
            int count = 0;
            while (count <n)
            {
                if(refNodePtr == null) //error
                    return -1;
                count++;
                refNodePtr = refNodePtr.Next;
            }

            while (refNodePtr != null)
            {
                refNodePtr = refNodePtr.Next;
                nthNodePtr = nthNodePtr.Next;
            }

            return (int)nthNodePtr.data;
        }
    }
}




/////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

class Program
    {
        static void Main(string[] args)
        {
            TestLinkedList linkedlist = new TestLinkedList();
            linkedlist.AddNode(1);
            linkedlist.AddNode(2);
            linkedlist.AddNode(3);
            linkedlist.AddNode(5);
            linkedlist.AddNode(6);
            linkedlist.AddFirst(0);

            int count = linkedlist.GetCount(linkedlist.HeadNode);

           Console.WriteLine(count.ToString());

           linkedlist.GetMiddleNodeData2(linkedlist.HeadNode);

            bool found = linkedlist.SearchKeyIterative(linkedlist.HeadNode,3);
            Console.WriteLine(found.ToString());
            found = linkedlist.SearchKeyIterative(linkedlist.HeadNode,7);
            Console.WriteLine(found.ToString());
            found = linkedlist.SearchKeyRecusrive(linkedlist.HeadNode,1);
            Console.WriteLine(found.ToString());
            found = linkedlist.SearchKeyRecusrive(linkedlist.HeadNode,8);
            Console.WriteLine(found.ToString());

            //linkedlist.DeleteNodeByPointer(linkedlist.HeadNode.Next.Next.Next.Next.Next);
            linkedlist.DeleteNode(linkedlist.HeadNode,6);
            linkedlist.SwapNodes(linkedlist.HeadNode, 1, 3);
            Console.ReadLine();
        }
    }


////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {

            TestLinkedList list = new TestLinkedList();
            list.AddData(1);
            list.AddData(0);
            list.AddData(1);
            list.AddData(0);
            list.AddData(1);
            list.AddData(0);

            ArrayList list1 = list.GetNodes();
            for (int i = 0; i < list1.Count; i++)
            {
                Console.Write(list1[i].ToString() + "-->");
            }
            Console.WriteLine();
            //list.DeleteAlternateNodes(list.HeadNode);
           // list.RecursiveDeleteAlternate(list.HeadNode);
             list1 = list.GetNodes();
            for (int i = 0; i < list1.Count; i++)
            {
                Console.Write(list1[i].ToString() + "-->");
            }
            Console.WriteLine();
           // list.AlternateSplit(list.HeadNode);

            list1 = list.GetNodes();
            for (int i = 0; i < list1.Count; i++)
            {
                Console.Write(list1[i].ToString() + "-->");
            }
            Console.WriteLine();

            TestLinkedList list3 = new TestLinkedList();
            list3.AddData(15);
            list3.AddData(10);
            list3.AddData(5);
            TestLinkedList list4 = new TestLinkedList();
            list4.AddData(20);
            list4.AddData(3);
            list4.AddData(2);
            //Node result = list.MergeSortedLists(list3.HeadNode, list4.HeadNode);

            TestLinkedList list5 = new TestLinkedList();
            list5.AddData(8);
            list5.AddData(7);
            list5.AddData(6);
            list5.AddData(5);
            list5.AddData(4);
            list5.AddData(3);
            list5.AddData(2);
            list5.AddData(1);


            Node r = list5.ReverseListInKSize(list5.HeadNode, 3);
            Console.ReadLine();
        }
    }

    public class Node
    {
        public object data;
        public Node next;
    }

    public class TestLinkedList
    {
        private Node headNode;

        public Node HeadNode
        {
            get
            {
                return headNode;
            }
        }

        public void AddData(object data)
        {
            Node newnode = new Node();
            newnode.data = data;
            newnode.next = null;

            if (headNode == null)
            {
                headNode = newnode;
            }
            else
            {
                newnode.next = headNode;
                headNode = newnode;
            }
        }


        public ArrayList GetNodes()
        {
            ArrayList list = new ArrayList();
            Node temp = headNode;
            while (temp != null)
            {
                list.Add(temp.data);
                temp = temp.next;
            }

            return list;
        }

        //Time Complexity: O(n) where n is the number of nodes in the given Linked List.
        public void DeleteAlternateNodes(Node head)
        {
            if (head == null)
                return;

            Node current     = head; //Points to head node
            Node next = head.next; //Points to next of head node

            while (current != null && next != null)
            {
                current.next = next.next; //Points to next of next node
                current = current.next; //Move current
                if (current != null)
                    next = current.next;
            }
        }

        public void RecursiveDeleteAlternate(Node head)
        {
            if (head == null)
                return;

            Node next = head.next;

            if (next == null)
                return;

            head.next = next.next;

             RecursiveDeleteAlternate(head.next);
        }

        public void AlternateSplit(Node head)
        {
            if (head == null)
                return;

            TestLinkedList list1 = new TestLinkedList();
            TestLinkedList list2 = new TestLinkedList();

            Node current = head;
            Node next = head.next;

            while (current != null && next != null)
            {
                list1.AddData(current.data);
                list2.AddData(next.data);

                current = next.next;
                if (current != null)
                {
                    next = current.next;
                }
            }

            if (current != null)
            {
                list1.AddData(current.data);
            }

        }

        public Node MergeSortedLists(Node left, Node right)
        {
            Node result = null;
            if (left == null)
                return right;
            if (right == null)
                return left;

            if ((int)left.data <= (int)right.data)
            {
                result = left;
                result.next = MergeSortedLists(left.next, right);
            }

            else if ((int)left.data > (int)right.data)
            {
                result = right;
                result.next = MergeSortedLists(left, right.next);
            }

            return result;
        }

        public Node ReverseListInKSize(Node head, int k)
        {
            if (head == null)
                return null;

            int count = 0;
            Node temp = head;
            Node prev = null;
            Node next = null;
            while (temp != null && count < k)
            {
                //if (count < k)
                {
                    count++;
                    next = temp.next;
                    temp.next = prev;
                    prev = temp;
                    temp = next;
                }
            }

            if (next != null)
                head.next = ReverseListInKSize(next, k);

            return prev;
        }
    }
}

