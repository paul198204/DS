using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace DSAppln
{
    interface StackADT
    {
        void Push(Object val);
        Object Pop();
        bool IsEmpty();
        bool IsFull();
        Object Peek();
        ArrayList Display();
    }

    class StackNode
    {
        public Object data;
        public StackNode Next;
    }

    class TestStack : StackADT
    {
        StackNode root = null;

        public TestStack()
        {
        }

        public void Push(object val)
        {
            StackNode newnode = new StackNode();
            newnode.data = val;
            newnode.Next = root;
            root = newnode;
        }

        public object Pop()
        {
            if (!IsEmpty())
            {
                StackNode node = root;
                root = root.Next;
                node.Next = null;
                return node.data;
            }
            throw new Exception("stack is empty");
        }

        public bool IsEmpty()
        {
            return root == null ? true : false;
        }

        public bool IsFull()
        {
            throw new NotImplementedException();
        }

        public object Peek()
        {
            if (!IsEmpty())
            {
                return root.data;
            }
            return 0;
        }

        public ArrayList Display()
        {
            ArrayList list = new ArrayList();
            StackNode temp = root;
            while (temp != null)
            {
                int data = Convert.ToInt32( temp.data);
                list.Add(data);
                temp = temp.Next;
            }

            return list;
        }
    }
}





using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace DSAppln
{
    class Program
    {
        static void Main(string[] args)
        {

            TestStack();
        }

        static void TestStack()
        {
            StackADT stack = new TestStack();
            stack.Push(1);
            stack.Push(2);
            stack.Push(3);
            stack.Push(4);

            ArrayList list = stack.Display();
            for (int i = 0; i < list.Count; i++)
            {
                Console.Write(list[i] + " ");
            }
            Console.WriteLine();
            stack.Pop();


            list = stack.Display();
            for (int i = 0; i < list.Count; i++)
            {
                Console.Write(list[i] + " ");
            }
            Console.WriteLine();
            stack.Peek();

            list = stack.Display();
            for (int i = 0; i < list.Count; i++)
            {
                Console.Write(list[i] + " ");
            }
            Console.WriteLine();

            stack.Pop();
            stack.Pop();
            stack.Pop();
            //stack.Pop();

            list = stack.Display();
            for (int i = 0; i < list.Count; i++)
            {
                Console.Write(list[i] + " ");
            }
            Console.WriteLine();

            Console.Read();
        }
    }
}
